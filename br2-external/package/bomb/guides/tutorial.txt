This will be a basic tutorial on how to use gdb as a debugger and basics of decoding ARM assembly.

1. Starting the debugger
  Give an overview of how to get gdb started.
  For our purposes, this will probably include:
    - Attaching gdbserver to a running process and listening on a serial port
    - Connecting gdb to the gdbserver on the serial port
    - Restarting the program with a custom script?

2. The TUI view
  Introduce the beginner-friendly TUI view for gdb
  Entering and exiting: tui enable, tui disable
  Changing the view: layout src, layout asm, layout split, layout regs
  Explain the caveat that if your program prints to the screen, you might need to disable and re-enable the TUI view
  when not in TUI mode, code can be seen with list, assembly with disass, and regs with info registers

3. Stepping through the code
  Cover how to move through the code
  Talk about s, n, si, ni

4. Breaking and running
  Talk about starting and stopping execution
  setting breakpoints with b <name>|*<address>
  running to the next breakpoint with c
  enable/disable commands to turn breakpoints on and off
  info breakpoints to see all the breakpoints

5. Examining data
  p <expression>
  x <address>
    /fmt depending on what you want to see
  info registers

6. Functions and the callstack
  bt or where to see the callstack
    and frame to move between stack frames
  finish to run to the end of a function
  info locals to see local variables
