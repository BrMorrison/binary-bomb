Binary Bomb
===========

This is a game about reverse-engineering based on a lab that is used in some
university courses. The idea of the game is that players are given a binary 
executable that prompts them for passwords. When a correct password is entered,
the player moves to the next phase and is prompted for the next password. If the
player enters a wrong password, the bomb will "explode." Once all the phases
have been completed, the player wins.

In order to determine the correct passwords, the player must use a debugger to
step through the program to understand the criteria for each password.


Building
========

To build the game and the Linux system it runs in, simply execute:
`./configure`
`./build`
The build takes a really long time to complete, but once it's done you should be
left with a bomb-game directory that has everything you need to run the game.


Running
=======

Playing the game requires qemu-system-arm and an arm gdb program (you can use
gdb-multiarch or the gdb built by buildroot as part of the build process).

The VM that contains the binary can be started with
`./run`

The details of how to connect the debugger and play the game are included in a
separate README in the bomb-game directory since that must be distributed to the
player for them to know how to play.


Acknowledgements
================

This game is not my original idea. I played it as part of an online course
called "The Hardware/Software Interface" around ten years ago, but could not
find a publicly available version that I was happy with so I tried to recreate
it from memory.

In my search for the bomb lab, I did find this one from CMU
https://github.com/kiliczsh/cmu-binary-bomb/tree/main, but it doesn't cover
buffer overflow exploits in the same way and seemed less fun. However, I did
reference it as I was writing some of the code for this game since the overall
concept is very similar.
